@page "/login"
@layout EmptyLayout

@using System.ComponentModel.DataAnnotations
@using Blazored.LocalStorage
@using Microsoft.AspNetCore.Components.Authorization


@inject HttpClient Http
@inject NavigationManager Navigation
@inject ILocalStorageService LocalStorage
@inject AuthenticationStateProvider AuthenticationStateProvider
@inject IToastService toastService


<div class="d-flex justify-content-center align-items-center vh-100">
    <div class="card shadow-lg" style="width: 400px;">
        <div class="card-body">
            <h3 class="card-title text-center">Login</h3>
            
            <EditForm Model="@loginModel" OnValidSubmit="HandleLogin">
                <DataAnnotationsValidator />
                <ValidationSummary />

                <div class="mb-3">
                    <label for="email" class="form-label">Username</label>
                    <InputText id="email" @bind-Value="loginModel.Username" class="form-control" placeholder="Enter your username" />
                    <ValidationMessage For="@(() => loginModel.Username)" class="text-danger" />
                </div>

                <div class="mb-3">
                    <label for="password" class="form-label">Password</label>
                    <InputText id="password" type="password" @bind-Value="loginModel.Password" class="form-control" placeholder="Enter your password" />
                    <ValidationMessage For="@(() => loginModel.Password)" class="text-danger" />
                </div>

                <button type="submit" class="btn btn-primary w-100">Log In</button>
            </EditForm>

            <div class="mt-3 text-center">
                <p>Don't have an account? <a href="/register">Register</a></p>
            </div>
        </div>
    </div>
</div>

@code {
    private LoginModel loginModel = new LoginModel();
    private string? returnUrl;

    protected override void OnInitialized()
    {
        returnUrl = Navigation
        .ToBaseRelativePath(Navigation.Uri)
        .Replace("login", "", StringComparison.OrdinalIgnoreCase);

        if (string.IsNullOrEmpty(returnUrl))
        {
            returnUrl = "/";
        }
    }

    private async Task HandleLogin()
    {
        
        var response = await Http.PostAsJsonAsync("auth/login", loginModel);

        if (response.IsSuccessStatusCode)
        {
            // Deserialize the response to get the token
            var tokenResponse = await response.Content.ReadFromJsonAsync<TokenResponse>();

            if (tokenResponse != null)
            {
                // Store the token in local storage
                await LocalStorage.SetItemAsync("authToken", tokenResponse.Token);

                // Mark the user as authenticated
                ((CustomAuthenticationStateProvider)AuthenticationStateProvider).MarkUserAsAuthenticated(tokenResponse.Token);

                // Redirect to the returnUrl or home
                Navigation.NavigateTo(returnUrl);
            }
        }
        else
        {
            // Handle error
            toastService.ShowError("Login not successful.");
        }
    }

    public async Task Logout()
    {
        await LocalStorage.RemoveItemAsync("authToken");
        ((CustomAuthenticationStateProvider)AuthenticationStateProvider).MarkUserAsLoggedOut();
        Navigation.NavigateTo("/login");
    }

    public class LoginModel
    {
        [Required]
        public string? Username { get; set; }

        [Required]
        public string? Password { get; set; }
    }

    public class TokenResponse
    {
        public string? Token { get; set; }
    }

}
