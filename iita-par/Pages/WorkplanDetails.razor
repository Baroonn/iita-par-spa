@page "/workplan-details/{id:long}"
@using PAR.Shared.DTOs
@using PAR.Shared.Enums
@using iita_par.Authentication
@using iita_par.Shared

@inherits AuthorizePage

@inject NavigationManager Navigation
@inject HttpClient _httpClient

<div class="par-card">
    <div class="record-header">
        <h1>Workplan Details - @objective?.Year</h1>
        <p>NRS Workplan</p>
    </div>
    <div class="record-details">
        @if(true)
        {
            <table>
                <tr>
                    <td style="width: 200px"><strong>Username:</strong></td>
                    <td>@objective?.Username</td>
                </tr>
                <tr>
                    <td><strong>Status:</strong></td>
                    <td>@((WorkplanStatus)objective.Status)</td>
                </tr>
                <tr>
                    <td><strong>Date Created:</strong></td>
                    <td>@objective?.DateCreated</td>
                </tr>
                <tr>
                    <td><strong>Objective:</strong></td>
                    <td>@objective?.Objective</td>
                </tr>
            </table>
        }
        else
        {
            <p>Loading User Data...</p>
        }
    </div>
</div>

<div class="workplan-actions par-card">
    <p style="float:left;margin-right:20px;">Manage your workplan: </p>
    <button class="edit-button" @onclick="(() => NavigateToEditWorkplan())">Edit Workplan Objective</button>
    <button class="add-kpi-button" @onclick="(() => NavigateToAddKpi())">Add KPIs</button>
    <button class="delete-button" @onclick="(() => showConfirmation = true)">Delete</button>
</div>
<div class="par-card" style="margin-top:20px;">
    <div class="kpi-list-header">
        <h2>List of Workplan KPIs</h2>
        @* <div>
            <label for="year-select">Pick a year:</label>
            <select id="year-select">
                <option value="2024">2024</option>
                <!-- Add other years as needed -->
            </select>
        </div> *@

    </div>
    
    <div class="kpi-list">
        @if (kpis != null)
        {
            int count = 1;
            foreach(var item in kpis)
            {
                <div class="kpi-item">
                    <h3>@count. @((MarkupString)item.Kpitext)</h3>
                    <p><strong>Activity for this KPI:</strong> @((MarkupString)item.Activity)</p>
                    <p><strong>Milestone 1st Qtr:</strong>@((MarkupString)item.MileStoneQtr1)</p>
                    <p><strong>Milestone 2nd Qtr:</strong>@((MarkupString)item.MileStoneQtr2)</p>
                    <p><strong>Milestone 3rd Qtr:</strong>@((MarkupString)item.MileStoneQtr3)</p>
                    <p><strong>Milestone 4th Qtr:</strong>@((MarkupString)item.MileStoneQtr4)</p>
                    <p><strong>Created:</strong> @item.CreatedDate</p>
                    <div class="kpi-actions">
                        <button class="delete-kpi-button" @onclick="()=>OpenKpiDeleteDialog(item.Id)">Delete KPI</button>
                        <button class="edit-objective-button" @onclick="() =>NavigateToEditKpi(item.Id)">Edit KPI</button>
                    </div>
                </div>
                count++;
            }
        }
    </div>
</div>

<DeleteConfirmation ShowDialog="showConfirmation"
                    OnConfirm="DeleteObjective"
                    OnCancel="() => showConfirmation = false" />

<DeleteConfirmation ShowDialog="showKpiConfirmation"
                    OnConfirm="DeleteKpi"
                    OnCancel="() => showKpiConfirmation = false" />


@code {
    [Parameter]
    public long? Id { get; set; }

    private ObjectiveReadDTO? objective;
    private KpiReadDTO[]? kpis;
    private bool showConfirmation = false;
    private bool showKpiConfirmation = false;
    private long selectedKpiId;

    protected override async Task OnInitializedAsync()
    {
        ShowLoading(true);
        objective = new()
            {
                Status = (int) WorkplanStatus.Draft
            };
        objective = await _httpClient.GetFromJsonAsync<ObjectiveReadDTO>($"workplans/objectives/{Id}");
        kpis = await _httpClient.GetFromJsonAsync<KpiReadDTO[]>($"workplans/objectives/{Id}/kpis");
        if(objective != null)
        {
            objective.Status ??= (int)WorkplanStatus.Draft;
        }
        ShowLoading(false);
    }

    private void NavigateToEditWorkplan()
    {
        Navigation.NavigateTo($"/edit-workplan/{Id}?objective={objective?.Objective}");
    }

    private void NavigateToAddKpi()
    {
        Navigation.NavigateTo($"workplan/{objective.Id}/kpi/-1");
    }

    private void NavigateToEditKpi(long kpiId)
    {
        Navigation.NavigateTo($"workplan/{objective.Id}/kpi/{kpiId}");
    }

    private async Task DeleteObjective()
    {
        showConfirmation = false;
        ShowLoading(true);
        var response = await _httpClient.DeleteAsync($"workplans/objectives/{objective.Id}");
        if (response.IsSuccessStatusCode)
        {
            ShowSuccess("Objective successfully deleted");
            NavigateTo("workplan");
        }
        else if (response.StatusCode == System.Net.HttpStatusCode.Unauthorized)
        {
            ShowError("Unauthorized. Please login again.");
            await Logout();
        }
        else
        {
            ShowError("Unable to delete objective.");
        }
        ShowLoading(false);
    }

    private async Task DeleteKpi()
    {
        showKpiConfirmation = false;
        ShowLoading(true);
        var response = await _httpClient.DeleteAsync($"workplans/objectives/{objective.Id}/kpis/{selectedKpiId}");
        if (response.IsSuccessStatusCode)
        {
            ShowSuccess("Kpi successfully deleted");
            kpis = await _httpClient.GetFromJsonAsync<KpiReadDTO[]>($"workplans/objectives/{Id}/kpis");
        }
        else if (response.StatusCode == System.Net.HttpStatusCode.Unauthorized)
        {
            ShowError("Unauthorized. Please login again.");
            await Logout();
        }
        else
        {
            ShowError("Unable to delete kpi.");
        }
        
        ShowLoading(false);
    }

    private async Task OpenKpiDeleteDialog(long kpiId)
    {
        selectedKpiId = kpiId;
        showKpiConfirmation = true;
    }
}
